#define SPRITE_SIZE 34		// 34 bytes is enough for a 16x16 sprite 2 bytes of size, 32 bytes of data
#define NUM_SPRITES 10		//make sure that the memory allocated to sprites (SPRITE_SIZE*NUM_SPRITES) doesn't over fill the device 
#define uint8_t unsigned int

uint8_t sprite[SPRITE_SIZE*NUM_SPRITES]={	
				    0x0d, 0x0a, 0xfe, 0x02, 0x13, 0x13, 0x13, 0x02, 0x02, 0x02, 
						0x13, 0x3b, 0x13, 0x02, 0xfe, 0xff, 0xfe, 0xfa, 
						0xfa, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
						0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				    0x0e, 0x0b, 0xfc, 0xfe, 0x01, 0xfd, 0x01, 0x01, 0x01, 0x01, 
						0x01, 0x01, 0xfe, 0x70, 0x20, 0x20, 0xf9, 0xf3, 
						0xf4, 0xfd, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 
						0xfb, 0xf8, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0x00,

				    0x0e, 0x0e, 0xfe, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xdf,
						0xdf, 0xdf, 0xc0, 0xff, 0xff, 0xfe, 0x9f, 0xff,
						0xff, 0xe0, 0xea, 0xea, 0xe8, 0xea, 0xe2, 0xea, 
						0xe0, 0xff, 0xff, 0xdf, 0x00, 0x00, 0x00, 0x00,

				    0x20, 0x08, 0xff, 0x81, 0xff, 0xff, 0xff, 0x7e, 0x18, 0x18,
						0x18, 0x10, 0x10, 0x00, 0x00, 0x08, 0x18, 0x18,
						0x18, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x18, 
						0x18, 0x18, 0x7e, 0xff, 0xff, 0xff, 0x81, 0xff};


